A51 MACRO ASSEMBLER  HANDLER                                                              03/12/2021 12:36:06 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\handler.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE handler.asm SET(SMALL) DEBUG PRINT(.\Listings\handler.lst) OBJECT(.\Obj
                      ects\handler.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ; RAM allocation
  0040                 2     CUR_ST  DATA 40H
  0041                 3     DgtCode DATA 41H
  0042                 4     KeyCode DATA 42H
  0043                 5     KeyNo   DATA 43H
  0044                 6     Key     DATA 44H
  0050                 7     KeyBuf  DATA 50H
  006F                 8     STACKST EQU  6FH
                       9     ; Assume a 24 MHZ crystal
                      10     ; Counts for a 25 ms delay are:
  003C                11     TH0COUNT EQU 3CH
  00B0                12     TL0COUNT EQU 0B0H
                      13     ;F0 in PSW will be used to store the answer from tests
0000                  14     org 0000H
0000 020200           15     ljmp Init
0003                  16     ORG 0003H
0003 0200C7           17     ljmp X0_INTR            ; jump to ext interrupt 0 handler
000B                  18     ORG 000BH
000B 020030           19     ljmp T0_INTR            ; Jump to timer 0 interrupt handler
0013                  20     ORG 0013H
0013 0200C8           21     ljmp X1_INTR            ; Jump to ext interrupt 1 handler
001B                  22     ORG 001BH
001B 0200C9           23     ljmp T1_INTR            ; Jump to timer 1 interrupt handler
0023                  24     ORG 0023H
0023 0200CA           25     ljmp Ser_INTR           ; Jump to Serial IO handler
0030                  26     org 0030H
0030 C28C             27     T0_INTR: CLR TR0        ; Stop the timer
0032 758C3C           28     MOV TH0, #TH0COUNT      ; Re-load counts for 25 ms delay
0035 758AB0           29     MOV TL0, #TL0COUNT
0038 D28C             30     SETB TR0                ; Restart T0
003A D2A9             31     SETB ET0                ; Re-enable interrupts from T0
003C 020060           32     LJMP FSM                ; Now manage the FSM
                      33     
0060                  34     ORG 0060H
0060 C0E0             35     FSM: PUSH ACC
0062 C0D0             36     PUSH PSW
0064 C083             37     PUSH DPH
0066 C082             38     PUSH DPL
                      39     
0068 1177             40     ACALL DO_TEST           ; Peform the test for this state
006A 1183             41     ACALL DO_ACTION         ; Perform the action based on test answer
006C 1195             42     ACALL SET_NEXT          ; Set current state = next state
                      43                             ; and return, cleaning up as we go
006E D082             44     POP DPL
0070 D083             45     POP DPH
0072 D0D0             46     POP PSW
0074 D0E0             47     POP ACC
0076 22               48     RET                                     ; Use ret during testing
                      49     ;RETI
0077                  50     DO_TEST:
0077 E540             51     MOV A, CUR_ST           ; Fetch the current state
0079 9000A4           52     MOV DPTR, #Test_Tab     ; Table of test numbers for states
007C 93               53     MOVC A, @A + DPTR       ; Get the test number for this state
007D 9000B0           54     MOV DPTR, #Test_Jmp     ; Jump table for tests
0080 25E0             55     ADD A, ACC              ; A = 2A: each entry is 2 bytes
0082 73               56     jmp @A + DPTR           ; Jump to the selected test
                      57     ; Note: selected test will do ret.
A51 MACRO ASSEMBLER  HANDLER                                                              03/12/2021 12:36:06 PAGE     2

0083                  58     DO_ACTION:
0083 9000A8           59     MOV DPTR, #Yes_Actions
0086 20D503           60     JB F0, Sel_Action       ; If test answer = yes, DPTR is correct
0089 9000AC           61     MOV DPTR, #No_Actions   ; If Test returned no, modify DPTR
008C                  62     Sel_Action:             ; Now look up the action to be taken
008C E540             63     MOV     A, CUR_ST       ; Fetch the current state
008E 93               64     MOVC A, @A + DPTR       ; and look up the action number
008F 25E0             65     ADD A, ACC              ; A = 2A : offset in Action jump table
                      66                             ; because each entry is 2 bytes
0091 9000B4           67     MOV DPTR, #Action_jmp   ; Jump table for actions
0094 73               68     JMP @A + DPTR           ; Jump to the selected action
                      69     ; Note: selected action will do ret
                      70                                             
0095                  71     SET_NEXT:
0095 9000BA           72     MOV DPTR, #Yes_Next     ; Array of next states for yes answer
0098 20D503           73     JB F0, Do_Next          ; If answer was yes, DPTR is correct
009B 9000BE           74     MOV DPTR, #No_Next      ; Else correct the DPTR to no answer
009E                  75     Do_Next:
009E E540             76     MOV A, CUR_ST           ; get the current state
00A0 93               77     MOVC A, @A+DPTR         ; get the next state
00A1 F540             78     MOV CUR_ST, A           ; and save it as current state
00A3 22               79     RET
                      80     
00A4 00010101         81     Test_Tab:    DB 0, 1, 1, 1
00A8 01020000         82     Yes_Actions: DB 1, 2, 0, 0
00AC 00000000         83     NO_Actions:  DB 0, 0, 0, 0
00B0                  84     Test_Jmp:
00B0 01C2             85     AJMP AnyKey
00B2 01C3             86     AJMP TheKey
00B4                  87     Action_Jmp:
00B4 01C4             88     AJMP DoNothing
00B6 01C5             89     AJMP FindKey
00B8 01C6             90     AJMP ReportKey
00BA 01020202         91     Yes_Next: DB 1, 2, 2, 2
00BE 00000300         92     No_Next:  DB 0, 0, 3, 0
00C2                  93     AnyKey:
00C2 22               94     RET
00C3                  95     TheKey:
00C3 22               96     RET
00C4                  97     DoNothing:
00C4 22               98     RET
00C5                  99     FindKey:
00C5 22              100     RET
00C6                 101     ReportKey:
00C6 22              102     RET
                     103     
00C7                 104     X0_INTR:                ; ext interrupt 0 handler
00C7 32              105     reti
00C8                 106     X1_INTR:                ; ext interrupt 0 handler
00C8 32              107     reti
00C9                 108     T1_INTR:                ; Timer 1 handler
00C9 32              109     reti
00CA                 110     Ser_INTR:               ; Serial IO handler
00CA 32              111     reti
0200                 112     ORG 0200H
0200                 113     Init:
0200 75816F          114     MOV SP, #STACKST        ; SP to top of 8051 memory
0203 754000          115     MOV CUR_ST, #00         ; Initialize current state to Idle
0206 C28C            116     CLR TR0                 ; Stop the timer (if running)
0208 758C3C          117     MOV TH0, #TH0COUNT      ; Load T0 counts for 25 ms delay
020B 758AB0          118     MOV TL0, #TL0COUNT
020E D2A9            119     SETB ET0                ; Enable interrupts from T0
0210 D2AF            120     SETB EA                 ; Enable interrupts globally
0212 D28C            121     SETB TR0                ; Start T0 timer
                     122     
0214 1130            123     TST1: acall T0_INTR     ; This is for testing only
A51 MACRO ASSEMBLER  HANDLER                                                              03/12/2021 12:36:06 PAGE     3

0216 80FC            124     sjmp TST1               ; Test ISR by calling it in SW
0218 80FE            125     L1: sjmp L1             ; This represents main program
                     126     END
                             
A51 MACRO ASSEMBLER  HANDLER                                                              03/12/2021 12:36:06 PAGE     4

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

ACC. . . . . . . .  D ADDR   00E0H   A   
ACTION_JMP . . . .  C ADDR   00B4H   A   
ANYKEY . . . . . .  C ADDR   00C2H   A   
CUR_ST . . . . . .  D ADDR   0040H   A   
DGTCODE. . . . . .  D ADDR   0041H   A   
DONOTHING. . . . .  C ADDR   00C4H   A   
DO_ACTION. . . . .  C ADDR   0083H   A   
DO_NEXT. . . . . .  C ADDR   009EH   A   
DO_TEST. . . . . .  C ADDR   0077H   A   
DPH. . . . . . . .  D ADDR   0083H   A   
DPL. . . . . . . .  D ADDR   0082H   A   
EA . . . . . . . .  B ADDR   00A8H.7 A   
ET0. . . . . . . .  B ADDR   00A8H.1 A   
F0 . . . . . . . .  B ADDR   00D0H.5 A   
FINDKEY. . . . . .  C ADDR   00C5H   A   
FSM. . . . . . . .  C ADDR   0060H   A   
INIT . . . . . . .  C ADDR   0200H   A   
KEY. . . . . . . .  D ADDR   0044H   A   
KEYBUF . . . . . .  D ADDR   0050H   A   
KEYCODE. . . . . .  D ADDR   0042H   A   
KEYNO. . . . . . .  D ADDR   0043H   A   
L1 . . . . . . . .  C ADDR   0218H   A   
NO_ACTIONS . . . .  C ADDR   00ACH   A   
NO_NEXT. . . . . .  C ADDR   00BEH   A   
PSW. . . . . . . .  D ADDR   00D0H   A   
REPORTKEY. . . . .  C ADDR   00C6H   A   
SEL_ACTION . . . .  C ADDR   008CH   A   
SER_INTR . . . . .  C ADDR   00CAH   A   
SET_NEXT . . . . .  C ADDR   0095H   A   
SP . . . . . . . .  D ADDR   0081H   A   
STACKST. . . . . .  N NUMB   006FH   A   
T0_INTR. . . . . .  C ADDR   0030H   A   
T1_INTR. . . . . .  C ADDR   00C9H   A   
TEST_JMP . . . . .  C ADDR   00B0H   A   
TEST_TAB . . . . .  C ADDR   00A4H   A   
TH0. . . . . . . .  D ADDR   008CH   A   
TH0COUNT . . . . .  N NUMB   003CH   A   
THEKEY . . . . . .  C ADDR   00C3H   A   
TL0. . . . . . . .  D ADDR   008AH   A   
TL0COUNT . . . . .  N NUMB   00B0H   A   
TR0. . . . . . . .  B ADDR   0088H.4 A   
TST1 . . . . . . .  C ADDR   0214H   A   
X0_INTR. . . . . .  C ADDR   00C7H   A   
X1_INTR. . . . . .  C ADDR   00C8H   A   
YES_ACTIONS. . . .  C ADDR   00A8H   A   
YES_NEXT . . . . .  C ADDR   00BAH   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
